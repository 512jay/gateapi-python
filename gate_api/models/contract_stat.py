# coding: utf-8

"""
    Gate API v4

    APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class ContractStat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'int',
        'lsr_taker': 'float',
        'lsr_account': 'float',
        'long_liq_size': 'int',
        'short_liq_size': 'int',
        'open_interest': 'int',
    }

    attribute_map = {
        'time': 'time',
        'lsr_taker': 'lsr_taker',
        'lsr_account': 'lsr_account',
        'long_liq_size': 'long_liq_size',
        'short_liq_size': 'short_liq_size',
        'open_interest': 'open_interest',
    }

    def __init__(
        self,
        time=None,
        lsr_taker=None,
        lsr_account=None,
        long_liq_size=None,
        short_liq_size=None,
        open_interest=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        # type: (int, float, float, int, int, int, Configuration) -> None
        """ContractStat - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._lsr_taker = None
        self._lsr_account = None
        self._long_liq_size = None
        self._short_liq_size = None
        self._open_interest = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if lsr_taker is not None:
            self.lsr_taker = lsr_taker
        if lsr_account is not None:
            self.lsr_account = lsr_account
        if long_liq_size is not None:
            self.long_liq_size = long_liq_size
        if short_liq_size is not None:
            self.short_liq_size = short_liq_size
        if open_interest is not None:
            self.open_interest = open_interest

    @property
    def time(self):
        """Gets the time of this ContractStat.  # noqa: E501

        Stat timestamp  # noqa: E501

        :return: The time of this ContractStat.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ContractStat.

        Stat timestamp  # noqa: E501

        :param time: The time of this ContractStat.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def lsr_taker(self):
        """Gets the lsr_taker of this ContractStat.  # noqa: E501

        Long/short account number ratio  # noqa: E501

        :return: The lsr_taker of this ContractStat.  # noqa: E501
        :rtype: float
        """
        return self._lsr_taker

    @lsr_taker.setter
    def lsr_taker(self, lsr_taker):
        """Sets the lsr_taker of this ContractStat.

        Long/short account number ratio  # noqa: E501

        :param lsr_taker: The lsr_taker of this ContractStat.  # noqa: E501
        :type: float
        """

        self._lsr_taker = lsr_taker

    @property
    def lsr_account(self):
        """Gets the lsr_account of this ContractStat.  # noqa: E501

        Long/short taker size ratio  # noqa: E501

        :return: The lsr_account of this ContractStat.  # noqa: E501
        :rtype: float
        """
        return self._lsr_account

    @lsr_account.setter
    def lsr_account(self, lsr_account):
        """Sets the lsr_account of this ContractStat.

        Long/short taker size ratio  # noqa: E501

        :param lsr_account: The lsr_account of this ContractStat.  # noqa: E501
        :type: float
        """

        self._lsr_account = lsr_account

    @property
    def long_liq_size(self):
        """Gets the long_liq_size of this ContractStat.  # noqa: E501

        Long liquidation size  # noqa: E501

        :return: The long_liq_size of this ContractStat.  # noqa: E501
        :rtype: int
        """
        return self._long_liq_size

    @long_liq_size.setter
    def long_liq_size(self, long_liq_size):
        """Sets the long_liq_size of this ContractStat.

        Long liquidation size  # noqa: E501

        :param long_liq_size: The long_liq_size of this ContractStat.  # noqa: E501
        :type: int
        """

        self._long_liq_size = long_liq_size

    @property
    def short_liq_size(self):
        """Gets the short_liq_size of this ContractStat.  # noqa: E501

        Short liquidation size  # noqa: E501

        :return: The short_liq_size of this ContractStat.  # noqa: E501
        :rtype: int
        """
        return self._short_liq_size

    @short_liq_size.setter
    def short_liq_size(self, short_liq_size):
        """Sets the short_liq_size of this ContractStat.

        Short liquidation size  # noqa: E501

        :param short_liq_size: The short_liq_size of this ContractStat.  # noqa: E501
        :type: int
        """

        self._short_liq_size = short_liq_size

    @property
    def open_interest(self):
        """Gets the open_interest of this ContractStat.  # noqa: E501

        Open interest  # noqa: E501

        :return: The open_interest of this ContractStat.  # noqa: E501
        :rtype: int
        """
        return self._open_interest

    @open_interest.setter
    def open_interest(self, open_interest):
        """Sets the open_interest of this ContractStat.

        Open interest  # noqa: E501

        :param open_interest: The open_interest of this ContractStat.  # noqa: E501
        :type: int
        """

        self._open_interest = open_interest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractStat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContractStat):
            return True

        return self.to_dict() != other.to_dict()
